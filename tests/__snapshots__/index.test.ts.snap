// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`resolve dependencies 1`] = `
"// resolve-dep.d.ts
import MagicString, { MagicStringOptions, OverwriteOptions } from "magic-string";
import { build } from "rolldown";

//#region node_modules/.pnpm/magic-string-ast@0.9.1/node_modules/magic-string-ast/dist/index.d.ts
/**
* MagicString with AST manipulation
*/
/**
* MagicString with AST manipulation
*/
interface Node {
	start?: number | null;
	end?: number | null;
}
/**
* MagicString with AST manipulation
*/
/**
* MagicString with AST manipulation
*/
interface MagicStringAST extends MagicString {}
/**
* MagicString with AST manipulation
*/
/**
* MagicString with AST manipulation
*/
declare class MagicStringAST implements MagicString {
	private prototype;
	s: MagicString;
	constructor(str: string | MagicString, options?: MagicStringOptions, prototype?: typeof MagicString);
	private getNodePos;
	removeNode(node: Node | Node[], { offset }?: {
		offset?: number
	}): this;
	moveNode(node: Node | Node[], index: number, { offset }?: {
		offset?: number
	}): this;
	sliceNode(node: Node | Node[], { offset }?: {
		offset?: number
	}): string;
	overwriteNode(node: Node | Node[], content: string | Node | Node[], { offset,...options }?: OverwriteOptions & {
		offset?: number
	}): this;
	snipNode(node: Node | Node[], { offset }?: {
		offset?: number
	}): MagicStringAST;
	clone(): this;
	toString(): string;
}
/**
* The result of code transformation.
*/
/**
* The result of code transformation.
*/
interface CodeTransform {
	code: string;
	map: any;
}
/**
* Generate an object of code and source map from MagicString.
*/
/**
* Generate an object of code and source map from MagicString.
*/
declare function generateTransform(s: MagicString | undefined, id: string): CodeTransform | undefined;

//#endregion
export { MagicStringAST, build };"
`;

exports[`typescript compiler 1`] = `
"// entry1.d.ts

//#region tests/fixtures/tsc/mod.d.ts
declare const str = "foo";
declare const num = 42;
declare const bool = true;
declare function fn(arg: typeof str): "foo" | 1;

//#endregion
export { bool, fn, num, str };
// entry2.d.ts

//#region tests/fixtures/tsc/entry2.d.ts
interface Unused {
    foo: string;
}

//#endregion
export { Unused };"
`;
